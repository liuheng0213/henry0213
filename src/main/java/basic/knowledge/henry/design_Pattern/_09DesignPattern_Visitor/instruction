target:

年底，CEO和CTO开始评定员工一年的工作绩效，员工分为工程师和经理，
CTO关注工程师的代码量、经理的新产品数量；
CEO关注的是工程师的KPI和经理的KPI以及新产品数量。

角色介绍

Visitor：接口或者抽象类，定义了对每个 Element 访问的行为，它的参数就是被访问的元素，它的方法个数理论上与元素的个数是一样的，因此，访问者模式要求元素的类型要稳定，如果经常添加、移除元素类，必然会导致频繁地修改 Visitor 接口，如果出现这种情况，则说明不适合使用访问者模式。
ConcreteVisitor：具体的访问者，它需要给出对每一个元素类访问时所产生的具体行为。
visible Element：元素接口或者抽象类，它定义了一个接受访问者（accept）的方法，其意义是指每一个元素都要可以被访问者访问。
ElementA、ElementB：具体的元素类，它提供接受访问的具体实现，而这个具体的实现，通常情况下是使用访问者提供的访问该元素类的方法。
ObjectStructure：定义当中所提到的对象结构，对象结构是一个抽象表述，它内部管理了元素集合，并且可以迭代这些元素提供访问者访问。





在上述示例中，Staff 扮演了 Element 角色，
而 Engineer 和 Manager 都是 ConcreteElement；
CEOVisitor 和 CTOVisitor 都是具体的 Visitor 对象；
而 BusinessReport 就是 ObjectStructure；
Client就是客户端代码。
访问者模式最大的优点就是增加访问者非常容易，我们从代码中可以看到，如果要增加一个访问者，只要新实现一个 Visitor 接口的类，从而达到数据对象与数据操作相分离的效果。如果不实用访问者模式，而又不想对不同的元素进行不同的操作，那么必定需要使用 if-else 和类型转换，这使得代码难以升级维护。


scenario:
工程师是代码数量，经理是产品数量，他们的职责不一样，也就是因为差异性，才使得访问模式能够发挥它的作用。
Staff、Engineer、Manager 3个类型就是对象结构，这些类型相对稳定，不会发生变化。

。



总结
我们要根据具体情况来评估是否适合使用访问者模式，例如，我们的对象结构是否足够稳定，是否需要经常定义新的操作，使用访问者模式是否能优化我们的代码，而不是使我们的代码变得更复杂。

访问者模式的优点。

各角色职责分离，符合单一职责原则
通过UML类图和上面的示例可以看出来，Visitor、ConcreteVisitor、Element 、ObjectStructure，职责单一，各司其责。
具有优秀的扩展性
如果需要增加新的访问者，增加实现类 ConcreteVisitor 就可以快速扩展。
使得数据结构和作用于结构上的操作解耦，使得操作集合可以独立变化
员工属性（数据结构）和CEO、CTO访问者（数据操作）的解耦。
灵活性


访问者模式的缺点。

具体元素对访问者公布细节，违反了迪米特原则
CEO、CTO需要调用具体员工的方法。
具体元素变更时导致修改成本大
变更员工属性时，多个访问者都要修改。
违反了依赖倒置原则，为了达到“区别对待”而依赖了具体类，没有以来抽象
访问者 visit 方法中，依赖了具体员工的具体方法。
